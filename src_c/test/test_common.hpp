
#ifndef TEST_COMMON_HPP
#define TEST_COMMON_HPP

#include <sodium/crypto_hash_sha256.h>

void print_c(const unsigned char *buf, const size_t len) {
	for(size_t i=0; i<len; i++) {
		printf("0x%02x%s", buf[i], (i == len-1 ? "\n" : (i % 8) == 7 ? ",\n" : ", "));
	}
}

static uint32_t x, y, z, w;

void xorshift_init() {
	x = 123456789;
	y = 362436069;
	z = 521288629;
	w = 88675123;
}

uint32_t xorshift() {
	const uint32_t t = x ^ (x << 11);
	x = y; y = z; z = w;
	return w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
}

bool SameBuffer(const unsigned char *a, const unsigned char *b, const size_t len) {
	return (memcmp(a, b, len) == 0);
}

bool SameScalar(const unsigned char *a, const unsigned char *b) {
	return SameBuffer(a, b, EPIR_SCALAR_SIZE);
}

bool SamePoint(const unsigned char *a, const unsigned char *b) {
	return SameBuffer(a, b, EPIR_POINT_SIZE);
}

bool SameCipher(const unsigned char *a, const unsigned char *b) {
	return SameBuffer(a, b, EPIR_CIPHER_SIZE);
}

template <typename T>
bool SameHash(const std::vector<T> &test, const unsigned char *hash) {
	unsigned char hash_test[crypto_hash_sha256_BYTES];
	crypto_hash_sha256(hash_test, (const unsigned char*)test.data(), sizeof(T) * test.size());
	return SameBuffer(hash_test, hash, crypto_hash_sha256_BYTES);
}

static const unsigned char privkey[] = {
	0x7e, 0xf6, 0xad, 0xd2, 0xbe, 0xd5, 0x9a, 0x79,
	0xba, 0x6e, 0xdc, 0xfb, 0xa4, 0x8f, 0xde, 0x7a,
	0x55, 0x31, 0x75, 0x4a, 0xf5, 0x93, 0x76, 0x34,
	0x6c, 0x8b, 0x52, 0x84, 0xee, 0xf2, 0x52, 0x07
};

static const unsigned char pubkey[] = {
	0x9c, 0x76, 0x82, 0x3d, 0xbd, 0xb9, 0xbf, 0x04,
	0x8f, 0xc5, 0xc2, 0xaf, 0x00, 0x0e, 0x28, 0xa1,
	0x48, 0xee, 0x02, 0x19, 0x99, 0xfb, 0x7f, 0x21,
	0xca, 0x1f, 0x84, 0xb8, 0xfe, 0x73, 0xd7, 0xe8
};

static const uint32_t msg = 0x12345678 & (EPIR_DEFAULT_MG_MAX - 1);

static const unsigned char r[] = {
	0x42, 0xff, 0x2d, 0x98, 0x4a, 0xe5, 0xa2, 0x8f,
	0x7d, 0x02, 0x69, 0x87, 0xc7, 0x10, 0x9a, 0x7b,
	0x3a, 0x1d, 0x36, 0x58, 0x82, 0x5a, 0x09, 0x17,
	0xe1, 0x69, 0x3e, 0x83, 0xa5, 0x71, 0x5d, 0x09
};

static const unsigned char cipher[] = {
	0x11, 0xa9, 0x4e, 0xb7, 0x18, 0x53, 0x7e, 0x94,
	0x7d, 0x0f, 0xf3, 0x0c, 0xdd, 0xae, 0x16, 0xae,
	0xab, 0x42, 0x9e, 0xac, 0x09, 0x2b, 0x22, 0x00,
	0x06, 0xb1, 0x9c, 0xcc, 0xb5, 0x26, 0xb4, 0x30,
	0xeb, 0x76, 0x83, 0xc0, 0xdf, 0x90, 0x3a, 0x88,
	0xf6, 0xf1, 0x09, 0x52, 0xbc, 0xa4, 0xd6, 0x45,
	0x28, 0x4f, 0xf7, 0xed, 0x95, 0xc6, 0xa4, 0xe9,
	0x67, 0xf5, 0xe7, 0xae, 0x22, 0xc9, 0x33, 0xcb
};

static const unsigned char mG_hash[] = {
	0x1c, 0x09, 0xf4, 0x62, 0xf1, 0xb5, 0x8f, 0xc1,
	0x40, 0xc9, 0x3c, 0xda, 0x6f, 0xec, 0x88, 0x85,
	0x08, 0x44, 0xe3, 0xf0, 0x04, 0xb7, 0x24, 0x87,
	0xb6, 0x53, 0x39, 0xbd, 0xc0, 0xe4, 0x17, 0x97
};

#define MG_SMALL_MMAX_MOD (16)
#define MG_SMALL_MMAX (1 << MG_SMALL_MMAX_MOD)

static const unsigned char mG_hash_small[] = {
	0x8c, 0x55, 0x49, 0x7e, 0x28, 0xd5, 0xea, 0x75,
	0x15, 0xdd, 0x32, 0xb3, 0x98, 0x34, 0x0b, 0xfa,
	0xf8, 0x89, 0x40, 0x35, 0xe0, 0x30, 0xd2, 0x13,
	0x50, 0x80, 0x84, 0x31, 0xb8, 0x00, 0x8a, 0xf2
};

// For selector tests.

static const uint64_t index_counts[] = { 1000, 1000, 1000 };
static const uint8_t n_indexes = 3;
static const uint64_t ciphers_count = 3000ULL;
static const uint64_t idx = 12345678;
static const uint64_t rows[] = { idx / 1'000'000ULL, (idx % 1'000'000ULL) / 1'000ULL, (idx % 1'000ULL) };
static const unsigned char selector_hash[] = {
	0xda, 0x20, 0x9d, 0x4f, 0x85, 0xad, 0x0d, 0xb2,
	0x68, 0x45, 0x6f, 0x0d, 0x4e, 0x9e, 0x90, 0x7f,
	0x8f, 0x87, 0x31, 0xa6, 0x69, 0x5d, 0xa5, 0x5f,
	0x1f, 0x3d, 0x19, 0x2f, 0x59, 0xac, 0xe9, 0x0c
};

#define DIMENSION (3)
#define PACKING   (3)
#define ELEM_SIZE (32)

#endif

